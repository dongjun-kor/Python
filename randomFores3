import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import export_graphviz
from subprocess import call
from IPython.display import Image

def dummy_fn(raw_Data, dummy_Name):
    prefix_Name = dummy_Name + '_'
    dummy_Variable = pd.get_dummies(raw_Data[dummy_Name])
    dummy_Data = raw_Data.join(dummy_Variable.add_prefix(prefix_Name))
    dummy_Data = dummy_Data.drop(dummy_Name, axis=1)
    return dummy_Data
#---------------------------------------------
raw_D = pd.read_csv("C:/Users/userPC/Desktop/LM.m.csv")
D = raw_D[['jobs', 'updown', 'sex', 'age', 'seed', 'devlop']]
print(D.shape)

# 범주형이 숫자로 인식됨
# (나중에는 csv에서 T/F와 같이 범주형으로 처리하도록)
print(D.dtypes)

# 범주형을 str로 변환
D = D.astype({'jobs':'str',
              'updown':'str',
              'sex':'str',
              'age':'str',
              'devlop':'str'})
print(D.dtypes)

##dummy_D = dummy_fn(D, 'updown')##제외
##print(dummy_D.shape)##제외
##print(dummy_D.columns)##제외
#---------------------------------------------
X = D[['jobs', 'sex', 'age', 'seed', 'devlop']]##변경
y = D['updown']##변경

x_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state=1234)
#---------------------------------------------
clf = DecisionTreeClassifier(min_samples_leaf=1,
                             min_samples_split=2,
                             ccp_alpha=0)
clf.fit(x_train, y_train)
fitt = clf.predict(x_train)
pred = clf.predict(x_test)

print("Train_set")
print(confusion_matrix(y_train, fitt))
print(classification_report(y_train, fitt))
print("Test_set")
print(confusion_matrix(y_test, pred))
print(classification_report(y_test, pred))
#---------------------------------------------
File_name = 'decision-tree-H3'
names_X_tree = ['jobs', 'sex', 'age', 'seed', 'devlop']##변경
export_graphviz(clf,
                out_file=File_name + '.dot', 
                feature_names = names_X_tree,
                class_names = ['-1', '0', '1'],##변경
                max_depth = 3, # 표현하고 싶은 최대 depth
                precision = 3, # 소수점 표기 자릿수
                filled = True, # class별 color 채우기
                rounded=True, # 박스의 모양을 둥글게
               )
call(['dot', '-Tpng', File_name+'.dot', '-o', File_name+'.png', '-Gdpi=600']) # 생성된 .dot 파일을 .png로 변환
Image(filename = File_name+'.png') # jupyter notebook에서 .png 직접 출력
